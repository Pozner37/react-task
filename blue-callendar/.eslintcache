[{"C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\index.js":"1","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\serviceWorker.js":"2","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\app\\store.ts":"3","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\App.tsx":"4","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\tableFilters\\filters.ts":"5","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\task\\TaskStore\\TaskSlice.ts":"6","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\event\\EventStore\\EventSlice.ts":"7","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\app\\homePage.tsx":"8","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\editForm\\editForm.tsx":"9","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\editForm\\addForm.tsx":"10","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\task\\TaskStore\\TaskReader.ts":"11","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\event\\EventStore\\EventReader.ts":"12","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\event\\CalendarEvent\\CalendarEvent.ts":"13","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\task\\CalendarTasks\\CalendarTask.ts":"14","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\task\\CalendarTasks\\CalendarUrgentTask.ts":"15","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\task\\CalendarTasks\\CalendarCompletedTask.ts":"16","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\CalendarTable\\calendarTable.tsx":"17","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\MenuBar\\menuBar.tsx":"18","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\editForm\\taskFormBody.tsx":"19","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\editForm\\eventFormBody.tsx":"20","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\editForm\\tabPanel.tsx":"21","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\assets\\SimpleDate.ts":"22","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\basicEntity\\basicEntity.ts":"23","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\tableFilters\\filterBar.tsx":"24","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\CalendarTable\\calendarTableHead.tsx":"25","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\searchBar\\searchBar.tsx":"26","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\event\\EventTable\\eventCollapseBody.tsx":"27","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\task\\TaskTable\\taskCollapseBody.tsx":"28","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\task\\TaskTable\\taskOther.tsx":"29","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\task\\TaskIcon\\taskPriorityIcon.tsx":"30","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\task\\TaskIcon\\taskTypeIcon.tsx":"31","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\event\\EventTable\\eventOther.tsx":"32","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\CalendarTable\\calendarTableRow.tsx":"33"},{"size":644,"mtime":1615734051620,"results":"34","hashOfConfig":"35"},{"size":5141,"mtime":1615713147922,"results":"36","hashOfConfig":"35"},{"size":592,"mtime":1615713147885,"results":"37","hashOfConfig":"35"},{"size":2872,"mtime":1615736355448,"results":"38","hashOfConfig":"35"},{"size":1697,"mtime":1615713147909,"results":"39","hashOfConfig":"35"},{"size":1114,"mtime":1615713147917,"results":"40","hashOfConfig":"35"},{"size":1152,"mtime":1615725549507,"results":"41","hashOfConfig":"35"},{"size":959,"mtime":1615713147884,"results":"42","hashOfConfig":"35"},{"size":1249,"mtime":1615713147895,"results":"43","hashOfConfig":"35"},{"size":2296,"mtime":1615713147893,"results":"44","hashOfConfig":"35"},{"size":1306,"mtime":1615713147916,"results":"45","hashOfConfig":"35"},{"size":783,"mtime":1615713147903,"results":"46","hashOfConfig":"35"},{"size":1964,"mtime":1615713147902,"results":"47","hashOfConfig":"35"},{"size":841,"mtime":1615713147912,"results":"48","hashOfConfig":"35"},{"size":645,"mtime":1615713147912,"results":"49","hashOfConfig":"35"},{"size":1020,"mtime":1615713147911,"results":"50","hashOfConfig":"35"},{"size":3528,"mtime":1615713147888,"results":"51","hashOfConfig":"35"},{"size":1590,"mtime":1615735615095,"results":"52","hashOfConfig":"35"},{"size":10134,"mtime":1615728153366,"results":"53","hashOfConfig":"35"},{"size":8283,"mtime":1615729418311,"results":"54","hashOfConfig":"35"},{"size":499,"mtime":1615713147897,"results":"55","hashOfConfig":"35"},{"size":1315,"mtime":1615713147886,"results":"56","hashOfConfig":"35"},{"size":582,"mtime":1615713147892,"results":"57","hashOfConfig":"35"},{"size":1536,"mtime":1615713147909,"results":"58","hashOfConfig":"35"},{"size":1140,"mtime":1615713147889,"results":"59","hashOfConfig":"35"},{"size":909,"mtime":1615713147908,"results":"60","hashOfConfig":"35"},{"size":1795,"mtime":1615713147905,"results":"61","hashOfConfig":"35"},{"size":753,"mtime":1615713147917,"results":"62","hashOfConfig":"35"},{"size":1712,"mtime":1615713147919,"results":"63","hashOfConfig":"35"},{"size":489,"mtime":1615713147915,"results":"64","hashOfConfig":"35"},{"size":565,"mtime":1615713147915,"results":"65","hashOfConfig":"35"},{"size":1146,"mtime":1615713147906,"results":"66","hashOfConfig":"35"},{"size":4694,"mtime":1615713147890,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"w32fzd",{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"75"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"75"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"75"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"75"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},"C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\index.js",[],"C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\serviceWorker.js",[],["140","141"],"C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\app\\store.ts",[],["142","143"],"C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\App.tsx",[],"C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\tableFilters\\filters.ts",[],"C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\task\\TaskStore\\TaskSlice.ts",[],"C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\event\\EventStore\\EventSlice.ts",[],"C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\app\\homePage.tsx",[],"C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\editForm\\editForm.tsx",[],"C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\editForm\\addForm.tsx",["144","145","146","147"],"import React, {FC, useState} from \"react\";\r\nimport {Box, Fab, makeStyles, Tab, Tabs} from \"@material-ui/core\";\r\nimport CalendarEvent from \"../event/CalendarEvent/CalendarEvent\";\r\nimport CalendarTask from \"../task/CalendarTasks/CalendarTask\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectEvents} from \"../event/EventStore/EventSlice\";\r\nimport {selectTasks} from \"../task/TaskStore/TaskSlice\";\r\nimport {Link} from \"react-router-dom\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport TabPanel from \"./tabPanel\";\r\nimport EventFormBody from \"./eventFormBody\";\r\nimport TaskFormBody from \"./taskFormBody\";\r\n\r\ninterface AddFormProps {\r\n}\r\n\r\nconst AddForm: FC<AddFormProps> = () => {\r\n    const classes = useStyles();\r\n    const events = useSelector(selectEvents);\r\n    const tasks = useSelector(selectTasks);\r\n\r\n    let id = '0';\r\n    const time = (new Date()).toISOString();\r\n\r\n    if (events.length > 0) {\r\n        id = events[events.length - 1].getId() + 1;\r\n    }\r\n    if (tasks.length > 0) {\r\n        id = tasks[tasks.length - 1].getId() + 1;\r\n    }\r\n    const emptyEvent = new CalendarEvent(id, '', '', time, time, 'BLUE', [], time);\r\n    const emptyTask = new CalendarTask(id, '', '', '', '', '');\r\n\r\n    const eventForm = () => {\r\n        return <EventFormBody item={emptyEvent} add={true}></EventFormBody>\r\n    };\r\n    const taskForm = () => {\r\n        return <TaskFormBody item={emptyTask} add={true}></TaskFormBody>;\r\n    };\r\n\r\n    const [value, setValue] = useState(0);\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n        setValue(newValue);\r\n    }\r\n    return (\r\n            <Box>\r\n                <Tabs value={value} onChange={handleChange}>\r\n                    <Tab label=\"Create Event\">\r\n                    </Tab>\r\n                    <Tab label=\"Create Task\">\r\n                    </Tab>\r\n                </Tabs>\r\n                <TabPanel value={value} index={0}>\r\n                    {eventForm()}\r\n                </TabPanel>\r\n                <TabPanel value={value} index={1}>\r\n                    {taskForm()}\r\n                </TabPanel>\r\n            </Box>\r\n    );\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n    fab: {\r\n        left: \"48%\"\r\n    },\r\n    box: {\r\n        padding: '10px'\r\n    }\r\n});\r\n\r\nexport default AddForm;\r\n","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\task\\TaskStore\\TaskReader.ts",[],"C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\event\\EventStore\\EventReader.ts",[],"C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\event\\CalendarEvent\\CalendarEvent.ts",[],"C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\task\\CalendarTasks\\CalendarTask.ts",[],"C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\task\\CalendarTasks\\CalendarUrgentTask.ts",[],"C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\task\\CalendarTasks\\CalendarCompletedTask.ts",[],"C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\CalendarTable\\calendarTable.tsx",[],"C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\MenuBar\\menuBar.tsx",[],"C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\editForm\\taskFormBody.tsx",[],"C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\editForm\\eventFormBody.tsx",["148"],"import React, {FC, useState} from \"react\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableRow,\r\n    TextField,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {getISOTime} from \"../../assets/SimpleDate\";\r\nimport {CirclePicker} from \"react-color\";\r\nimport ChipInput from 'material-ui-chip-input';\r\nimport {addEvent, updateEvent} from '../event/EventStore/EventSlice';\r\nimport CalendarEvent from \"../event/CalendarEvent/CalendarEvent\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\ninterface EventFormProps {\r\n    item: CalendarEvent,\r\n    add?: boolean\r\n}\r\n\r\nconst EventFormBody: FC<EventFormProps> = ({item, add = false}) => {\r\n    const event = item;\r\n    const dispatch = useDispatch();\r\n    const [invitedGuests, setInvitedGuests] = useState([...event.getInvitedGuests()]);\r\n    const [title, setTitle] = useState(event.getTitle());\r\n    const [color, setColor] = useState(event.getColor());\r\n    const [description, setDescription] = useState(event.getDescription());\r\n    const [beginningTime, setBeginningTime] = useState(getISOTime(event.getBeginningTime()));\r\n    const [endingTime, setEndingTime] = useState(getISOTime(event.getEndingTime()));\r\n    const [notificationTime, setNotificationTime] = useState(getISOTime(event.getNotificationTime()));\r\n    const [invalidForm, setInvalidForm] = useState(false);\r\n    const [helperText, setHelperText] = useState(\"\");\r\n    const pageHistory = useHistory();\r\n\r\n    const validateForm = () => {\r\n        if(title.length === 0){\r\n            setInvalidForm(true);\r\n            setHelperText(\"Please enter a title\");\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    const updateTitle = (event: any) => {\r\n        if(event.target.value.length > 0) {\r\n            setTitle(event.target.value);\r\n            setInvalidForm(false);\r\n            setHelperText(\"\");\r\n\r\n        } else {\r\n            setInvalidForm(true);\r\n            setHelperText(\"Please enter a title\");\r\n        }\r\n    };\r\n    const updateDescription = (event: any) => {\r\n        setDescription(event.target.value);\r\n    };\r\n    const updateBeginningTime = (event: any) => {\r\n        setBeginningTime(event.target.value);\r\n    };\r\n    const updateEndingTime = (event: any) => {\r\n        setEndingTime(event.target.value);\r\n    };\r\n    const updateNotificationTime = (event: any) => {\r\n        setNotificationTime(event.target.value);\r\n    };\r\n    const updateColor = (event: any) => {\r\n        setColor(event.hex);\r\n    };\r\n    const handleAddChip = (chip: any) => {\r\n        invitedGuests.push(chip);\r\n        setInvitedGuests(invitedGuests);\r\n    };\r\n    const handleDeleteChip = (chip: any, index: any) => {\r\n        invitedGuests.splice(index, 1);\r\n        setInvitedGuests(invitedGuests);\r\n    };\r\n    const handleClose = () => {\r\n        pageHistory.push('/');\r\n    };\r\n    const submitForm = () => {\r\n        if(validateForm()) {\r\n            const updatedEvent = new CalendarEvent(event.getId(), title, description, beginningTime, endingTime, color, invitedGuests, notificationTime);\r\n            if (add) {\r\n                dispatch(addEvent(updatedEvent));\r\n            } else {\r\n                dispatch(updateEvent(updatedEvent));\r\n            }\r\n            pageHistory.push('/')\r\n        }\r\n\r\n    };\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <CardContent>\r\n                    <Table>\r\n                        <TableBody>\r\n                            <TableRow>\r\n                                <TableCell><Typography>Title:</Typography></TableCell>\r\n                                <TableCell>\r\n                                    <TextField defaultValue={event.getTitle()} onChange={updateTitle} error={invalidForm} helperText={helperText}\r\n                                               multiline/>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell><Typography>Description:</Typography></TableCell>\r\n                                <TableCell>\r\n                                    <TextField defaultValue={event.getDescription()} onChange={updateDescription}\r\n                                               multiline/>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell><Typography>Beginning Time:</Typography></TableCell>\r\n                                <TableCell>\r\n                                    <TextField\r\n                                        id=\"datetime-local\"\r\n                                        type=\"datetime-local\"\r\n                                        defaultValue={getISOTime(event.getBeginningTime())}\r\n                                        InputLabelProps={{\r\n                                            shrink: true,\r\n                                        }}\r\n                                        onChange={updateBeginningTime}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell><Typography>Ending Time:</Typography></TableCell>\r\n                                <TableCell>\r\n                                    <TextField\r\n                                        id=\"datetime-local\"\r\n                                        type=\"datetime-local\"\r\n                                        defaultValue={getISOTime(event.getEndingTime())}\r\n                                        InputLabelProps={{\r\n                                            shrink: true,\r\n                                        }}\r\n                                        onChange={updateEndingTime}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell><Typography>Color:</Typography></TableCell>\r\n                                <TableCell>\r\n                                    <CirclePicker onChange={updateColor}/>\r\n                                    <Typography>Selected Color:</Typography>\r\n                                    <CirclePicker colors={[color]}/>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell><Typography>Invite guests:</Typography></TableCell>\r\n                                <TableCell>\r\n                                    <ChipInput\r\n                                        value={invitedGuests}\r\n                                        onAdd={(chip) => handleAddChip(chip)}\r\n                                        onDelete={(chip, index) => handleDeleteChip(chip, index)}\r\n                                    />\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell><Typography>Notification Time:</Typography></TableCell>\r\n                                <TableCell>\r\n                                    <TextField\r\n                                        id=\"datetime-local\"\r\n                                        type=\"datetime-local\"\r\n                                        defaultValue={getISOTime(event.getNotificationTime())}\r\n                                        InputLabelProps={{\r\n                                            shrink: true,\r\n                                        }}\r\n                                        onChange={updateNotificationTime}\r\n                                    /> </TableCell>\r\n                            </TableRow>\r\n                        </TableBody>\r\n                    </Table>\r\n                </CardContent>\r\n                <CardActions>\r\n                    <Button onClick={submitForm}>Save</Button>\r\n                    <Button onClick={handleClose}>Cancel</Button>\r\n                </CardActions>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EventFormBody;","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\editForm\\tabPanel.tsx",[],"C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\assets\\SimpleDate.ts",[],"C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\basicEntity\\basicEntity.ts",[],"C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\tableFilters\\filterBar.tsx",["149"],"import React, {FC} from 'react';\r\nimport {makeStyles, Typography} from \"@material-ui/core\";\r\nimport {ToggleButton, ToggleButtonGroup} from \"@material-ui/lab\";\r\nimport {FilterEnum} from \"./filters\";\r\n\r\ninterface FilterBarProps {\r\n    setFilter: React.Dispatch<React.SetStateAction<FilterEnum>>,\r\n    filter: FilterEnum,\r\n}\r\n\r\nconst FilterBar: FC<FilterBarProps> = ({setFilter, filter}) => {\r\n    const classes = useStyles();\r\n    const {NO_FILTER, EVENTS_ONLY, TASKS_ONLY, HIGH_PRIORITY_TASKS, UNCOMPLETED_TASKS} = FilterEnum;\r\n    return (\r\n        <div className={classes.cell}>\r\n            <ToggleButtonGroup value={filter} exclusive className={classes.button}>\r\n                <ToggleButton value={NO_FILTER} onClick={() => setFilter(NO_FILTER)}>No Filter</ToggleButton>\r\n                <ToggleButton value={EVENTS_ONLY} onClick={() => setFilter(EVENTS_ONLY)}>Events Only</ToggleButton>\r\n                <ToggleButton value={TASKS_ONLY} onClick={() => setFilter(TASKS_ONLY)}>Tasks Only</ToggleButton>\r\n                <ToggleButton value={UNCOMPLETED_TASKS} onClick={() => setFilter(UNCOMPLETED_TASKS)}>Uncompleted Tasks</ToggleButton>\r\n                <ToggleButton value={HIGH_PRIORITY_TASKS} onClick={() => setFilter(HIGH_PRIORITY_TASKS)}>High Priority\r\n                    Tasks</ToggleButton>\r\n            </ToggleButtonGroup>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FilterBar;\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        backgroundColor: 'white',\r\n    },\r\n    cell: {\r\n        padding: \"15px\"\r\n    },\r\n});","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\CalendarTable\\calendarTableHead.tsx",[],"C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\searchBar\\searchBar.tsx",[],"C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\event\\EventTable\\eventCollapseBody.tsx",[],"C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\task\\TaskTable\\taskCollapseBody.tsx",["150"],"import React, {FC} from 'react';\r\nimport {makeStyles, TableBody, TableCell, TableRow, Typography} from \"@material-ui/core\";\r\nimport CalendarTask from \"../CalendarTasks/CalendarTask\";\r\n\r\ninterface TaskCollapseBodyProps {\r\n    task: CalendarTask,\r\n}\r\n\r\nconst TaskCollapseBody: FC<TaskCollapseBodyProps> = ({task}) => {\r\n    const classes = useStyles();\r\n    return (\r\n            <TableRow>\r\n                <TableCell className={classes.borderlessTableCell}>\r\n                    <Typography>Description:&nbsp;{task.getDescription()}</Typography>\r\n                </TableCell>\r\n            </TableRow>\r\n    );\r\n}\r\n\r\nexport default TaskCollapseBody;\r\n\r\nconst useStyles = makeStyles({\r\n    borderlessTableCell: {\r\n        borderBottom: \"none\",\r\n    },\r\n});","C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\task\\TaskTable\\taskOther.tsx",[],"C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\task\\TaskIcon\\taskPriorityIcon.tsx",[],"C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\task\\TaskIcon\\taskTypeIcon.tsx",[],"C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\event\\EventTable\\eventOther.tsx",[],"C:\\Users\\idopo\\Documents\\react-task\\blue-callendar\\src\\features\\CalendarTable\\calendarTableRow.tsx",[],{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","replacedBy":"154"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","severity":1,"message":"156","line":2,"column":14,"nodeType":"157","messageId":"158","endLine":2,"endColumn":17},{"ruleId":"155","severity":1,"message":"159","line":8,"column":9,"nodeType":"157","messageId":"158","endLine":8,"endColumn":13},{"ruleId":"155","severity":1,"message":"160","line":9,"column":8,"nodeType":"157","messageId":"158","endLine":9,"endColumn":16},{"ruleId":"155","severity":1,"message":"161","line":18,"column":11,"nodeType":"157","messageId":"158","endLine":18,"endColumn":18},{"ruleId":"155","severity":1,"message":"159","line":20,"column":9,"nodeType":"157","messageId":"158","endLine":20,"endColumn":13},{"ruleId":"155","severity":1,"message":"162","line":2,"column":21,"nodeType":"157","messageId":"158","endLine":2,"endColumn":31},{"ruleId":"155","severity":1,"message":"163","line":2,"column":21,"nodeType":"157","messageId":"158","endLine":2,"endColumn":30},"no-native-reassign",["164"],"no-negated-in-lhs",["165"],"@typescript-eslint/no-unused-vars","'Fab' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'HomeIcon' is defined but never used.","'classes' is assigned a value but never used.","'Typography' is defined but never used.","'TableBody' is defined but never used.","no-global-assign","no-unsafe-negation"]